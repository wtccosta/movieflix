{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { getAuthData } from './storage';\nexport const getTokenData = () => {\n  try {\n    return jwtDecode(getAuthData().access_token);\n  } catch (error) {\n    return undefined;\n  }\n};\nexport const isAuthenticated = () => {\n  let tokenData = getTokenData();\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\n};\nexport const hasAnyRoles = roles => {\n  if (roles.length === 0) {\n    return true;\n  }\n\n  const tokenData = getTokenData();\n\n  if (tokenData !== undefined) {\n    for (var i = 0; i < roles.length; i++) {\n      if (tokenData.authorities.includes(roles[i])) {\n        return true;\n      }\n    } //return roles.some(role => tokenData.authorities.includes(role));\n\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/wardes/DEVSUPERIOR_BOOTCAMP/movieflix/frontweb/src/util/auth.ts"],"names":["jwtDecode","getAuthData","getTokenData","access_token","error","undefined","isAuthenticated","tokenData","exp","Date","now","hasAnyRoles","roles","length","i","authorities","includes"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAUA,OAAO,MAAMC,YAAY,GAAG,MAA6B;AACvD,MAAI;AACF,WAAOF,SAAS,CAACC,WAAW,GAAGE,YAAf,CAAhB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,WAAOC,SAAP;AACD;AACF,CANM;AAQP,OAAO,MAAMC,eAAe,GAAG,MAAe;AAC5C,MAAIC,SAAS,GAAGL,YAAY,EAA5B;AACA,SAAOK,SAAS,IAAIA,SAAS,CAACC,GAAV,GAAgB,IAAhB,GAAuBC,IAAI,CAACC,GAAL,EAApC,GAAiD,IAAjD,GAAwD,KAA/D;AACD,CAHM;AAKP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,QAAMN,SAAS,GAAGL,YAAY,EAA9B;;AAEA,MAAIK,SAAS,KAAKF,SAAlB,EAA6B;AAC3B,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACC,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,UAAIP,SAAS,CAACQ,WAAV,CAAsBC,QAAtB,CAA+BJ,KAAK,CAACE,CAAD,CAApC,CAAJ,EAA8C;AAC5C,eAAO,IAAP;AACD;AACF,KAL0B,CAM3B;;AACD;;AAED,SAAO,KAAP;AACD,CAjBM","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { getAuthData } from './storage';\r\n\r\nexport type Role = 'ROLE_MEMBER' | 'ROLE_VISITOR';\r\n\r\nexport type TokenData = {\r\n  exp: number;\r\n  user_name: string;\r\n  authorities: Role[];\r\n};\r\n\r\nexport const getTokenData = (): TokenData | undefined => {\r\n  try {\r\n    return jwtDecode(getAuthData().access_token) as TokenData;\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n  let tokenData = getTokenData();\r\n  return tokenData && tokenData.exp * 1000 > Date.now() ? true : false;\r\n};\r\n\r\nexport const hasAnyRoles = (roles: Role[]): boolean => {\r\n  if (roles.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  const tokenData = getTokenData();\r\n\r\n  if (tokenData !== undefined) {\r\n    for (var i = 0; i < roles.length; i++) {\r\n      if (tokenData.authorities.includes(roles[i])) {\r\n        return true;\r\n      }\r\n    }\r\n    //return roles.some(role => tokenData.authorities.includes(role));\r\n  }\r\n\r\n  return false;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
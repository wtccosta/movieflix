{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2, _process$env$REACT_AP3;\n\nimport axios from 'axios';\nimport qs from 'qs';\nimport history from './history';\nimport { getAuthData } from './storage';\nexport const BASE_URL = (_process$env$REACT_AP = process.env.REACT_APP_BACKEND_URL) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'http://localhost:8080';\nconst CLIENT_ID = (_process$env$REACT_AP2 = process.env.REACT_APP_CLIENT_ID) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : 'dscatalog';\nconst CLIENT_SECRET = (_process$env$REACT_AP3 = process.env.REACT_APP_CLIENT_SECRET) !== null && _process$env$REACT_AP3 !== void 0 ? _process$env$REACT_AP3 : 'dscatalog123';\nexport const requestBackendLogin = loginData => {\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    Authorization: 'Basic ' + window.btoa(CLIENT_ID + ':' + CLIENT_SECRET)\n  };\n  const data = qs.stringify({ ...loginData,\n    grant_type: 'password'\n  });\n  return axios({\n    method: 'POST',\n    baseURL: BASE_URL,\n    url: '/oauth/token',\n    data,\n    headers\n  });\n};\nexport const requestBackend = config => {\n  const headers = config.withCredentials ? { ...config.headers,\n    Authorization: 'Bearer ' + getAuthData().access_token\n  } : config.headers;\n  return axios({ ...config,\n    baseURL: BASE_URL,\n    headers\n  });\n}; // Add a request interceptor\n\naxios.interceptors.request.use(function (config) {\n  //\n  return config;\n}, function (error) {\n  //\n  return Promise.reject(error);\n}); // Add a response interceptor\n\naxios.interceptors.response.use(function (response) {\n  //\n  return response;\n}, function (error) {\n  if (error.response.status === 401) {\n    history.push('/admin/auth/login');\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["/home/wardes/DEVSUPERIOR_BOOTCAMP/movieflix/frontweb/src/util/requests.ts"],"names":["axios","qs","history","getAuthData","BASE_URL","process","env","REACT_APP_BACKEND_URL","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","requestBackendLogin","loginData","headers","Authorization","window","btoa","data","stringify","grant_type","method","baseURL","url","requestBackend","config","withCredentials","access_token","interceptors","request","use","error","Promise","reject","response","status","push"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,OAAO,MAAMC,QAAQ,4BACnBC,OAAO,CAACC,GAAR,CAAYC,qBADO,yEACkB,uBADhC;AAGP,MAAMC,SAAS,6BAAGH,OAAO,CAACC,GAAR,CAAYG,mBAAf,2EAAsC,WAArD;AACA,MAAMC,aAAa,6BAAGL,OAAO,CAACC,GAAR,CAAYK,uBAAf,2EAA0C,cAA7D;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,SAAD,IAA0B;AAC3D,QAAMC,OAAO,GAAG;AACd,oBAAgB,mCADF;AAEdC,IAAAA,aAAa,EAAE,WAAWC,MAAM,CAACC,IAAP,CAAYT,SAAS,GAAG,GAAZ,GAAkBE,aAA9B;AAFZ,GAAhB;AAKA,QAAMQ,IAAI,GAAGjB,EAAE,CAACkB,SAAH,CAAa,EACxB,GAAGN,SADqB;AAExBO,IAAAA,UAAU,EAAE;AAFY,GAAb,CAAb;AAKA,SAAOpB,KAAK,CAAC;AACXqB,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAElB,QAFE;AAGXmB,IAAAA,GAAG,EAAE,cAHM;AAIXL,IAAAA,IAJW;AAKXJ,IAAAA;AALW,GAAD,CAAZ;AAOD,CAlBM;AAoBP,OAAO,MAAMU,cAAc,GAAIC,MAAD,IAAgC;AAC5D,QAAMX,OAAO,GAAGW,MAAM,CAACC,eAAP,GACZ,EACE,GAAGD,MAAM,CAACX,OADZ;AAEEC,IAAAA,aAAa,EAAE,YAAYZ,WAAW,GAAGwB;AAF3C,GADY,GAKZF,MAAM,CAACX,OALX;AAOA,SAAOd,KAAK,CAAC,EAAE,GAAGyB,MAAL;AAAaH,IAAAA,OAAO,EAAElB,QAAtB;AAAgCU,IAAAA;AAAhC,GAAD,CAAZ;AACD,CATM,C,CAWP;;AACAd,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAUL,MAAV,EAAkB;AAChB;AACA,SAAOA,MAAP;AACD,CAJH,EAKE,UAAUM,KAAV,EAAiB;AACf;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CARH,E,CAWA;;AACA/B,KAAK,CAAC4B,YAAN,CAAmBM,QAAnB,CAA4BJ,GAA5B,CACE,UAAUI,QAAV,EAAoB;AAClB;AACA,SAAOA,QAAP;AACD,CAJH,EAKE,UAAUH,KAAV,EAAiB;AACf,MAAIA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCjC,IAAAA,OAAO,CAACkC,IAAR,CAAa,mBAAb;AACD;;AACD,SAAOJ,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAVH","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\r\nimport qs from 'qs';\r\nimport history from './history';\r\nimport { getAuthData } from './storage';\r\n\r\nexport const BASE_URL =\r\n  process.env.REACT_APP_BACKEND_URL ?? 'http://localhost:8080';\r\n\r\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID ?? 'dscatalog';\r\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET ?? 'dscatalog123';\r\n\r\ntype LoginData = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nexport const requestBackendLogin = (loginData: LoginData) => {\r\n  const headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n    Authorization: 'Basic ' + window.btoa(CLIENT_ID + ':' + CLIENT_SECRET),\r\n  };\r\n\r\n  const data = qs.stringify({\r\n    ...loginData,\r\n    grant_type: 'password',\r\n  });\r\n\r\n  return axios({\r\n    method: 'POST',\r\n    baseURL: BASE_URL,\r\n    url: '/oauth/token',\r\n    data,\r\n    headers,\r\n  });\r\n};\r\n\r\nexport const requestBackend = (config: AxiosRequestConfig) => {\r\n  const headers = config.withCredentials\r\n    ? {\r\n        ...config.headers,\r\n        Authorization: 'Bearer ' + getAuthData().access_token,\r\n      }\r\n    : config.headers;\r\n\r\n  return axios({ ...config, baseURL: BASE_URL, headers });\r\n};\r\n\r\n// Add a request interceptor\r\naxios.interceptors.request.use(\r\n  function (config) {\r\n    //\r\n    return config;\r\n  },\r\n  function (error) {\r\n    //\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use(\r\n  function (response) {\r\n    //\r\n    return response;\r\n  },\r\n  function (error) {\r\n    if (error.response.status === 401) {\r\n      history.push('/admin/auth/login');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}